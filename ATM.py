"""Checking Account Program"""

class NegativeBalance(ValueError): pass
class NegativeDeposit(ValueError): pass
class NegativeWithdrawal(ValueError): pass
class WrongOperation(ValueError): pass
class Overdraft(Exception): pass
class FinishTransaction(Exception): pass

class Account():
    '''bank account contains current balance and all histories of transactions'''
    modes = ('DEPOSIT', 'WITHDREWAL', 'SERVICE_CHARGE', 'END')
    
    def __init__(self, init_balance=0.0, init_charge=0.0): #initialize
        self.balance = init_balance
        self.charge = init_charge
        self.service_fee = 10.0
        
        self.transaction_history = []

        self.summary = {'balance':self.balance, 'charge':self.charge, \
                        'DEPOSIT':{'number':0, 'amount':0.0}, \
                        'WITHDRAWAL':{'number':0, 'amount':0.0}, \
                        'SERVICE_CHARGE':{'number':0, 'amount':0.0}\
                        }

    def last_transaction(self):
        '''return the last transaction'''
        return self.transaction_history[-1]

    def update(self, mode, amount):
        """update the transaction history

    mode = 'DEPOSIT' | 'WITHDRAWAL' | 'SERVICE_CHARGE'"""
##        if self.balance < 0.0:
##            raise NegativeBalance

        item = (mode, amount)
        self.transaction_history.append(item)
        self.summary[mode]['number'] += 1
        self.summary[mode]['amount'] += amount

    def history(self, mode='TOTAL'):
        if mode == 'TOTAL':
            return self.transaction_history
        elif mode in self.modes:
            #return the list of the type of transaction
            return [(t, v) for (t, v) in self.transaction_history \
                    if t == mode]

    def deposit(self, amount):
        '''make a deposit'''
        if float(amount) < 0.0:
                raise NegativeDeposit('Invalid Negative Deposit')
        else:
            self.balance += float(amount)
            self.update('DEPOSIT',amount)
        
    def withdrawal(self, amount):
        '''make a withdrawal'''
        if float(amount) < 0.0:
            raise NegativeWithdrawal('Invelid Negatilve Withdrawal')
        elif float(amount) > self.balance: #overdraft
            self.balance -= self.service_fee
            self.update('SERVICE_CHARGE', -self.service_fee)
            raise Overdraft('Insufficient balance & service fee charged')
        else:
            self.balance -= amount
            self.update('WITHDRAWAL', amount)
                 
def teller(account, mode='END', amount=0.0): #Process
    '''deals transactions of given mode and amount

    return display of account summary'''

    if mode == 'END':
        raise FinishTransaction
    elif mode == 'DEPOSIT':
        account.deposit(amount)
        

def interface(account, input_string='END'): #I/O
    '''deals with user inputs and display the outputs

    'D' -> deposit | 'W' -> withdrawal | 'S' -> service charge
    do transactions with entered amounts
    'END' -> FinishTransaction'''

    def get_input():
        '''promts and gets the types and amounts'''
        mode = str(input('Enter the type of transaction: ')).upper()

    def show_output():
        '''display the summary generated by Teller()'''

    try:
        while True:
            show_output(Teller(account, *get_input()))
            
    except ValueError:
        print("Transaction Error: Invalid amount")

    except FinishTransaction:
        print("Your deal was finished. Thank you.")

##if __name__ == '__main__':
##    an_account = Account()
##    interface(an_account)
